library(ggplot2); packageVersion("ggplot2")
library(phyloseq); packageVersion("phyloseq")
library(Biostrings); packageVersion("Biostrings")
library(dplyr); packageVersion("dplyr")
library(easycsv)
library(devtools)
library(rBLAST); packageVersion("rBLAST")
library(tidyverse); packageVersion("tidyverse")
path = "/home/carloslima/projects/MitoSonar/work-dir/"
setwd(path)
path1 = "data-raw/fastqs/"
blastout <- "data-raw/blast.out"
blastout2 <- "data-raw/blast.out.unflitered"
tax_sequences <- "data/taxsequences.fna"
tax_sequences2 <- "data/taxsequences.fna.unfiltered"
vert_fasta <- "data-raw/MiFish_all_mitogenomes.fasta"
fns <- list.files(paste(path, path1, sep = ""))
fastqs <- fns[grepl(".fastq$", fns)]
fastqs <- sort(fastqs) # Sorting fastqs so that Forward (R1) and Reverse (R2) reads correspond to each other.
fnFs <- fastqs[grepl("_R1", fastqs)]
fnRs <- fastqs[grepl("_R2", fastqs)]
system(paste("echo Examining quality profiles of forward reads..."))
for(fnF in fnFs) {
fastq_name <- sub("_R1_001.fastq$", "", fnF)
sample_dir <- paste0(path,"data/images/plots/",fastq_name,"_quality_report")
if(!dir.exists(sample_dir)){dir.create(sample_dir)}
png(filename = paste0(sample_dir,"/",fastq_name,"_forward_quality.png"), width = 800, height = 600)
print(fnF)
qqF <- qa(paste0(path, path1, fnF))[["perCycle"]]$quality
print(ShortRead:::.plotCycleQuality(qqF, main="Forward reads quality profile"))
dev.off()
}
system(paste("echo Examining quality profiles of reverse reads..."))
for(fnR in fnRs) {
fastq_name <- sub("_R2_001.fastq$", "", fnR)
sample_dir <- paste0(path,"data/images/plots/",fastq_name,"_quality_report")
if(!dir.exists(sample_dir)){dir.create(sample_dir)}
png(filename = paste0(sample_dir,"/",fastq_name,"_reverse_quality.png"), width = 800, height = 600)
print(fnR)
qqR <- qa(paste0(path, path1, fnR))[["perCycle"]]$quality
print(ShortRead:::.plotCycleQuality(qqR, main="Reverse reads quality profile"))
dev.off()
}
system(paste("echo Quality reports saved into 'work-dir/data/images/plots'"))
system(paste("echo Filtering and Trimming..."))
filtFs <- paste0(path, sapply(strsplit(fnFs, "\\."), `[`, 1), "_filt.fastq.gz")
filtRs <- paste0(path, sapply(strsplit(fnRs, "\\."), `[`, 1), "_filt.fastq.gz")
for(i in seq_along(fnFs)) { #Adjust parameters according to quality profiles
fastqPairedFilter(paste0(path, path1, c(fnFs[i], fnRs[i])), c(filtFs[i], filtRs[i]), maxN=maxN, maxEE=maxEE, truncQ=as.numeric(truncQ), trimLeft=as.numeric(trimLeft), truncLen=c(truncLen,truncLen), compress=TRUE, verbose=TRUE)
}
system(paste("echo Examining quality profiles after filtering..."))
for(fnF in filtFs) {
fastq_name <- sub(paste0("^", "/home/carloslima/projects/MitoSonar/work-dir/"), "", fnF)
fastq_name <- sub("_R1_001_filt.fastq.gz$", "", fastq_name)
sample_dir <- paste0(path,"data/images/plots/",fastq_name,"_quality_report")
if(!dir.exists(sample_dir)){dir.create(sample_dir)}
png(filename = paste0(sample_dir,"/",fastq_name,"_forward_filtered_quality.png"), width = 800, height = 600)
print(fnF)
qqF <- qa(paste0(fnF))[["perCycle"]]$quality
print(ShortRead:::.plotCycleQuality(qqF, main="Forward reads quality profile after filtering"))
dev.off()
}
for(fnR in filtRs) {
fastq_name <- sub(paste0("^", "/home/carloslima/projects/MitoSonar/work-dir/"), "", fnR)
fastq_name <- sub("_R2_001_filt.fastq.gz$", "", fastq_name)
sample_dir <- paste0(path,"data/images/plots/",fastq_name,"_quality_report")
if(!dir.exists(sample_dir)){dir.create(sample_dir)}
png(filename = paste0(sample_dir,"/",fastq_name,"_reverse_filtered_quality.png"), width = 800, height = 600)
print(fnR)
qqR <- qa(paste0(fnR))[["perCycle"]]$quality
print(ShortRead:::.plotCycleQuality(qqR, main="Reverse reads quality profile after filtering"))
dev.off()
}
system(paste("echo Quality reports have been sent to 'work-dir/data/images/plots'"))
system(paste("echo Derreplicating FASTQs..."))
derepFs <- lapply(filtFs, derepFastq, verbose=TRUE)
derepRs <- lapply(filtRs, derepFastq, verbose=TRUE)
sam_names <- sapply(strsplit(fnFs, "/"), tail, n=1)
sam_names <- sapply(strsplit(sam_names, "_"), `[`, 1)
names(derepFs) <- sam_names
names(derepRs) <- sam_names
system(paste("echo Initiating inference phase..."))
dadainfer <- function(derepFastqs){
dada(derepFastqs, err=inflateErr(tperr1,3), errorEstimationFunction=loessErrfun, selfConsist = TRUE)
}
dadaFs <- dadainfer(derepFs)
dadaRs <- dadainfer(derepRs)
system(paste("echo Drawing estimated error rates plots..."))
estimErrPng <- function(dadaObj,samId,sample_dir,acgtBase) {
png(filename = paste0(sample_dir,"/",samId,"_estimErr_",acgtBase,".png"), width = 800, height = 600)
plotErrors(dadaObj, acgtBase, nominalQ=TRUE)
dev.off()
}
if (length(dadaFs) > 1) {
i=1
while (i <= length(sam_names)) {
sample_dir <- paste0(path,"data/images/plots/",sam_names[i],"_estimated_errors")
if(!dir.exists(sample_dir)){dir.create(sample_dir)}
estimErrPng(dadaFs[[i]],sam_names[i],sample_dir,"A")
estimErrPng(dadaFs[[i]],sam_names[i],sample_dir,"C")
estimErrPng(dadaFs[[i]],sam_names[i],sample_dir,"G")
estimErrPng(dadaFs[[i]],sam_names[i],sample_dir,"T")
i=i+1
}
}else {
sample_dir <- paste0(path,"data/images/plots/",sam_names,"_estimated_errors")
if(!dir.exists(sample_dir)){dir.create(sample_dir)}
estimErrPng(dadaFs,sam_names,sample_dir,"A")
estimErrPng(dadaFs,sam_names,sample_dir,"C")
estimErrPng(dadaFs,sam_names,sample_dir,"G")
estimErrPng(dadaFs,sam_names,sample_dir,"T")
}
system(paste("echo Plots saved into 'work-dir/data/images/plots'"))
system(paste("echo Removing chimeric sequences..."))
bimFs <- sapply(dadaFs, isBimeraDenovo, verbose=TRUE)
bimRs <- sapply(dadaRs, isBimeraDenovo, verbose=TRUE)
print(unname(sapply(bimFs, mean)), digits=2)
print(unname(sapply(bimRs, mean)), digits=2)
mergers <- mapply(mergePairs, dadaFs, derepFs, dadaRs, derepRs, SIMPLIFY=FALSE)
mergers.nochim <- mapply(function(mm, bF, bR) mm[!bF[mm$forward] & !bR[mm$reverse],], mergers, bimFs, bimRs, SIMPLIFY=FALSE)
system(paste("echo Building tables..."))
seqtab <- makeSequenceTable(mergers.nochim)
seqtab2 <- seqtab[,nchar(colnames(seqtab)) %in% seq(80,120)]
View(seqtab)
View(seqtab2)
seqs <- colnames(seqtab2)
otab <- otu_table(seqtab2, taxa_are_rows=FALSE)
colnames(otab) <- paste0("Seq_", seq(ncol(otab)))
system(paste("echo Preparing database for taxonomy annotation..."))
writeFasta <- function(seqs, output) {
seqsout <- mapply( function(idx, sequence) paste0(">Seq_",idx,"\n",sequence,"\n"), seq(length(seqs)), seqs)
write(paste0(seqsout), file = output, sep = "")
}
seqs_for_blast <- DNAStringSet(seqs)
names(seqs_for_blast) <- sapply(seq(length(seqs)),function(x) {paste0("Seq_",x)})
writeFasta(seqs, paste(path, tax_sequences, sep = ""))
transotab = t(otab)
write.table(transotab, paste0(path, "data/otutable.txt"))
write.csv(transotab, paste0(path, "data/otutable.csv"))
system(paste("/home/carloslima/tools/ncbi-blast-2.15.0+/bin//makeblastdb -dbtype nucl -in", paste0(path,vert_fasta)))
system(paste("echo Blasting..."))
system(paste("/home/carloslima/tools/ncbi-blast-2.15.0+/bin//blastn -query", paste0(path, tax_sequences),  "-db", paste0(path, vert_fasta), "-outfmt '6 qseq qseqid sseqid pident length mismatch gapopen qstart qend sstart send evalue bitscore' -max_target_seqs 1 -out", paste0(path, blastout)))
blasttable <- read.table(paste0(path, blastout))
View(blasttable)
paste("/home/carloslima/tools/ncbi-blast-2.15.0+/bin//blastn -query", paste0(path, tax_sequences),  "-db", paste0(path, vert_fasta), "-outfmt 6 -max_target_seqs 1 -out", paste0(path, blastout))
blastresults <- blasttable %>%
filter(pident == 100) %>%
select(qid, sid) %>%
data.frame()
colnames(blasttable) <- c("qseq", "qid", "sid", "pident", "length", "mismatch", "gapopen", "qstart", "qend", "sstart", "send", "evalue", "bitscore")
paste("/home/carloslima/tools/ncbi-blast-2.15.0+/bin//blastn -query", paste0(path, tax_sequences),  "-db", paste0(path, vert_fasta), "-outfmt 6 -max_target_seqs 1 -out", paste0(path, blastout))
blastresults <- blasttable %>%
filter(pident == 100) %>%
select(qid, sid) %>%
data.frame()
blasttable <- read.table(paste0(path, blastout))
colnames(blasttable) <- c("qseq", "qid", "sid", "pident", "length", "mismatch", "gapopen", "qstart", "qend", "sstart", "send", "evalue", "bitscore")
paste("/home/carloslima/tools/ncbi-blast-2.15.0+/bin//blastn -query", paste0(path, tax_sequences),  "-db", paste0(path, vert_fasta), "-outfmt 6 -max_target_seqs 1 -out", paste0(path, blastout))
blastresults <- blasttable %>%
filter(pident == 100) %>%
select(qid, sid) %>%
data.frame()
taxtab <- data.frame(seqs = colnames(otab), stringsAsFactors = FALSE) %>%
left_join(blastresults, by=c('seqs'='qid'))
taxtab$taxa <- taxtab$sid
rownames(taxtab) <- taxtab$seqs
View(taxtab)
taxtab <- taxtab %>%
select(-seqs, -sid) %>%
as.matrix() %>%
tax_table
ps <- phyloseq(otab, taxtab)
View(ps)
ps@otu_table
ps@tax_table
system(paste("echo Done! Now plotting most abundant taxonomies by sample..."))
toptaxa <- names(sort(taxa_sums(ps), decreasing=TRUE))[1:3]
ps.toptaxa <- transform_sample_counts(ps, function(OTU) OTU/sum(OTU))
View(ps.toptaxa)
ps.toptaxa@tax_table
ps.toptaxa@otu_table
ps.toptaxa <- prune_taxa(toptaxa, ps.toptaxa)
plot_bar(ps.toptaxa, fill="taxa")
system(paste("echo Done! Now plotting most abundant taxonomies by sample..."))
toptaxa <- names(sort(taxa_sums(ps), decreasing=TRUE))[1:50]
ps.toptaxa <- transform_sample_counts(ps, function(OTU) OTU/sum(OTU))
ps.toptaxa <- prune_taxa(toptaxa, ps.toptaxa)
plot_bar(ps.toptaxa, fill="taxa")
system(paste("echo Done! Now plotting most abundant taxonomies by sample..."))
toptaxa <- names(sort(taxa_sums(ps), decreasing=TRUE))[1]
ps.toptaxa <- transform_sample_counts(ps, function(OTU) OTU/sum(OTU))
ps.toptaxa <- prune_taxa(toptaxa, ps.toptaxa)
plot_bar(ps.toptaxa, fill="taxa")
system(paste("echo Done! Now plotting most abundant taxonomies by sample..."))
toptaxa <- names(sort(taxa_sums(ps), decreasing=TRUE))[1]
ps.toptaxa <- transform_sample_counts(ps, function(OTU) OTU/sum(OTU))
ps.toptaxa <- prune_taxa(toptaxa, ps.toptaxa)
plot_bar(ps.toptaxa, fill="taxa")
system(paste("echo Done! Now plotting most abundant taxonomies by sample..."))
toptaxa <- names(sort(taxa_sums(ps), decreasing=TRUE))[1:2]
ps.toptaxa <- transform_sample_counts(ps, function(OTU) OTU/sum(OTU))
ps.toptaxa <- prune_taxa(toptaxa, ps.toptaxa)
plot_bar(ps.toptaxa, fill="taxa")
system(paste("echo Done! Now plotting most abundant taxonomies by sample..."))
toptaxa <- names(sort(taxa_sums(ps), decreasing=TRUE))[1:10]
ps.toptaxa <- transform_sample_counts(ps, function(OTU) OTU/sum(OTU))
ps.toptaxa <- prune_taxa(toptaxa, ps.toptaxa)
plot_bar(ps.toptaxa, fill="taxa")
toptaxa <- names(sort(taxa_sums(ps), decreasing=TRUE))[1:100]
ps.toptaxa <- transform_sample_counts(ps, function(OTU) OTU/sum(OTU))
ps.toptaxa <- prune_taxa(toptaxa, ps.toptaxa)
plot_bar(ps.toptaxa, fill="taxa")
toptaxa <- names(sort(taxa_sums(ps), decreasing=TRUE))[1:10]
ps.toptaxa <- transform_sample_counts(ps, function(OTU) OTU/sum(OTU))
ps.toptaxa <- prune_taxa(toptaxa, ps.toptaxa)
plot_bar(ps.toptaxa, fill="taxa")
system(paste("echo Done! Now plotting most abundant taxonomies by sample..."))
# Obter as top 5 taxonomias por amostra
top_taxa_by_sample <- taxa_sums(ps)
top_taxa_by_sample <- lapply(top_taxa_by_sample, function(x) names(sort(x, decreasing=TRUE)[1:5]))
# Criar um gráfico separado para cada amostra
for (sample_name in colnames(otu_table(ps))) {
# Selecionar as top 5 taxonomias para a amostra atual
taxa <- top_taxa_by_sample[[sample_name]]
ps_toptaxa <- prune_taxa(taxa, ps)
# Criar um nome de arquivo único para cada gráfico
filename <- paste0(path, "data/images/plots/", sample_name, "_toptaxa.png")
# Plotar o gráfico
#png(filename = filename, width = 800, height = 600)
plot_bar(ps_toptaxa, fill="taxa")
#dev.off()
}
# Plotar o gráfico
#png(filename = filename, width = 800, height = 600)
plot_bar(ps_toptaxa, fill="taxa")
system(paste("echo Done! Now plotting most abundant taxonomies by sample..."))
# Obter as top 5 taxonomias por amostra
top_taxa_by_sample <- taxa_sums(ps)
top_taxa_by_sample <- lapply(top_taxa_by_sample, function(x) names(sort(x, decreasing=TRUE)[1:5]))
# Criar um gráfico separado para cada amostra
for (sample_name in colnames(otu_table(ps))) {
# Selecionar as top 5 taxonomias para a amostra atual
taxa <- top_taxa_by_sample[[sample_name]]
ps_toptaxa <- prune_taxa(taxa, ps)
# Criar um nome de arquivo único para cada gráfico
filename <- paste0(path, "data/images/plots/", sample_name, "_toptaxa.png")
# Plotar o gráfico
#png(filename = filename, width = 800, height = 600)
plot_bar(ps_toptaxa, fill="taxa")
#dev.off()
}
system(paste("echo Done! Now plotting most abundant taxonomies by sample..."))
# Obter as top 5 taxonomias por amostra
top_taxa_by_sample <- taxa_sums(ps)
top_taxa_by_sample <- lapply(top_taxa_by_sample, function(x) names(sort(x, decreasing=TRUE)[1:5]))
# Criar um gráfico separado para cada amostra
for (sample_name in colnames(otu_table(ps))) {
# Selecionar as top 5 taxonomias para a amostra atual
taxa <- top_taxa_by_sample[[sample_name]]
ps_toptaxa <- prune_taxa(taxa, ps)
# Criar um nome de arquivo único para cada gráfico
filename <- paste0(path, "data/images/plots/", sample_name, "_toptaxa.png")
# Plotar o gráfico
png(filename = filename, width = 800, height = 600)
plot_bar(ps_toptaxa, fill="taxa")
dev.off()
}
?ggplot
View(ps.toptaxa)
ggplot(data = ps.toptaxa)
View(ps.toptaxa)
ps.toptaxa@tax_table
system(paste("echo Done! Now plotting most abundant taxonomies by sample..."))
toptaxa <- names(sort(taxa_sums(ps), decreasing=TRUE))[1:10]
ps.toptaxa <- transform_sample_counts(ps, function(OTU) OTU/sum(OTU))
ps.toptaxa <- prune_taxa(toptaxa, ps.toptaxa)
plot_bar(ps.toptaxa, fill="taxa")
ggplot() +
geom_bar(data = as.data.frame(sample_sums(ps.toptaxa)), aes(x = Sample, y = Abundance), stat = "identity", fill = "lightblue") +
facet_wrap(~Taxonomy, scales = "free_y", ncol = 2) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
# System command to indicate the beginning of the plotting process
system(paste("echo Done! Now plotting most abundant taxonomies by sample..."))
# Selecionar as top 10 taxonomias mais abundantes
toptaxa <- names(sort(taxa_sums(ps), decreasing = TRUE))[1:10]
# Normalizar as contagens de OTU em relação à amostra
ps_toptaxa <- transform_sample_counts(ps, function(OTU) OTU/sum(OTU))
# Selecionar apenas as top 10 taxonomias
ps_toptaxa <- prune_taxa(toptaxa, ps_toptaxa)
# Extrair os dados para o gráfico
df <- as.data.frame(sample_sums(ps_toptaxa))
df$Sample <- rownames(df)
df$Taxonomy <- rownames(df)
df <- tidyr::gather(df, key = "Sample", value = "Abundance", -Taxonomy)
# Plotar o gráfico usando ggplot2
p <- ggplot(df, aes(x = Sample, y = Abundance, fill = Taxonomy)) +
geom_bar(stat = "identity") +
facet_wrap(~Taxonomy, scales = "free_y", ncol = 2) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
print(p)
# Plotar o gráfico usando ggplot2
ggplot(df, aes(x = Sample, y = Abundance, fill = Taxonomy)) +
geom_bar(stat = "identity") +
facet_wrap(~Taxonomy, scales = "free_y", ncol = 2) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
# System command to indicate the beginning of the plotting process
system(paste("echo Done! Now plotting most abundant taxonomies by sample..."))
# Selecionar as top 10 taxonomias mais abundantes
toptaxa <- names(sort(taxa_sums(ps), decreasing = TRUE))[1:10]
# Normalizar as contagens de OTU em relação à amostra
ps_toptaxa <- transform_sample_counts(ps, function(OTU) OTU/sum(OTU))
# Selecionar apenas as top 10 taxonomias
ps_toptaxa <- prune_taxa(toptaxa, ps_toptaxa)
# Extrair os dados para o gráfico
df <- as.data.frame(taxa_sums(ps_toptaxa))
df$Sample <- rownames(df)
df <- tidyr::gather(df, key = "Taxonomy", value = "Abundance", -Sample)
# Plotar o gráfico usando ggplot2
p <- ggplot(df, aes(x = Taxonomy, y = Abundance, fill = Sample)) +
geom_bar(stat = "identity") +
facet_wrap(~Sample, scales = "free_y", ncol = 1) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
print(p)
ps.toptaxa
ps.toptaxa$otu_table
ps.toptaxa
?plot_bar
plot_bar(ps.toptaxa, x="Taxa", y="Abundance")
plot_bar(ps.toptaxa, x="taxa", y="Abundance")
system(paste("echo Done! Now plotting most abundant taxonomies by sample..."))
toptaxa <- names(sort(taxa_sums(ps), decreasing=TRUE))[1:10]
ps.toptaxa <- transform_sample_counts(ps, function(OTU) OTU/sum(OTU))
ps.toptaxa <- prune_taxa(toptaxa, ps.toptaxa)
plot_bar(ps.toptaxa, x="taxa", y="Abundance")
plot_bar(ps.toptaxa, x="taxa", y="Abundance", fill="taxa")
plot_bar(ps.toptaxa, x="taxa", y="Abundance", fill="taxa", facet_grid="sample")
plot_bar(ps.toptaxa, x="taxa", y="Abundance", fill="taxa", facet_grid="Sample")
system(paste("echo Done! Now plotting most abundant taxonomies by sample..."))
toptaxa <- names(sort(taxa_sums(ps), decreasing=TRUE))[1:5]
ps.toptaxa <- transform_sample_counts(ps, function(OTU) OTU/sum(OTU))
ps.toptaxa <- prune_taxa(toptaxa, ps.toptaxa)
plot_bar(ps.toptaxa, x="taxa", y="Abundance", fill="taxa", facet_grid="Sample")
plot_bar(ps.toptaxa[1], x="taxa", y="Abundance", fill="taxa")
plot_bar(ps.toptaxa[[1]], x="taxa", y="Abundance", fill="taxa")
plot_bar(ps.toptaxa, x="taxa", y="Abundance", fill="taxa")
system(paste("echo Done! Now plotting most abundant taxonomies by sample..."))
toptaxa <- names(sort(taxa_sums(ps), decreasing=TRUE))[1:5]
ps.toptaxa <- transform_sample_counts(ps, function(OTU) OTU/sum(OTU))
# Criar um gráfico separado para cada amostra
for (sample_name in colnames(otu_table(ps))) {
# Selecionar as top 5 taxonomias para a amostra atual
ps_sample <- prune_samples(sample_name, ps_toptaxa)
ps_toptaxa_sample <- prune_taxa(toptaxa, ps_sample)
# Plotar o gráfico para a amostra atual
png(filename = paste0(path, "data/images/plots/", sample_name, "_toptaxa.png"), width = 800, height = 600)
plot_bar(ps_toptaxa_sample, x = "taxa", y = "Abundance", fill = "taxa")
dev.off()
}
# Criar um gráfico separado para cada amostra
for (sample_name in colnames(otu_table(ps))) {
# Selecionar as top 5 taxonomias para a amostra atual
ps_sample <- prune_samples(sample_name, ps_toptaxa)
ps_toptaxa_sample <- prune_taxa(toptaxa, ps_sample)
# Plotar o gráfico para a amostra atual
#png(filename = paste0(path, "data/images/plots/", sample_name, "_toptaxa.png"), width = 800, height = 600)
plot_bar(ps_toptaxa_sample, x = "taxa", y = "Abundance", fill = "taxa")
#dev.off()
}
View(top_taxa_by_sample)
# Selecionar as top 5 taxonomias para a amostra atual
ps_sample <- prune_samples(sample_name, ps_toptaxa)
# Selecionar as top 5 taxonomias para a amostra atual
ps_sample <- prune_samples(sample_name, ps.toptaxa)
for (sample_name in colnames(otab)){
print(sample_name)
}
for (sample_name in otab){
print(sample_name)
}
for (sample_name in colnames(otu_table(ps))){
print(sample_name)
}
for (sample_name in colnames(otu_table())){
print(sample_name)
}
for (sample_name in colnames(otu_table(ps.toptaxa))){
print(sample_name)
}
ps.toptaxa@otu_table
for (sample_name in names(otu_table(ps.toptaxa))){
print(sample_name)
}
for (sample_name in names(otu_table(ps.toptaxa))){
print(sample_name)
}
for (sample_name in row.names(otu_table(ps.toptaxa))){
print(sample_name)
}
# Criar um gráfico separado para cada amostra
for (sample_name in row.names(otu_table(ps.toptaxa))) {
# Selecionar as top 5 taxonomias para a amostra atual
ps_sample <- prune_samples(sample_name, ps_toptaxa)
ps_toptaxa_sample <- prune_taxa(toptaxa, ps_sample)
# Plotar o gráfico para a amostra atual
png(filename = paste0(path, "data/images/plots/", sample_name, "_toptaxa.png"), width = 800, height = 600)
plot_bar(ps_toptaxa_sample, x = "taxa", y = "Abundance", fill = "taxa")
dev.off()
}
# Criar um gráfico separado para cada amostra
for (sample_name in row.names(otu_table(ps.toptaxa))) {
# Selecionar as top 5 taxonomias para a amostra atual
ps_sample <- prune_samples(sample_name, ps_toptaxa)
ps_toptaxa_sample <- prune_taxa(toptaxa, ps_sample)
# Plotar o gráfico para a amostra atual
#png(filename = paste0(path, "data/images/plots/", sample_name, "_toptaxa.png"), width = 800, height = 600)
plot_bar(ps_toptaxa_sample, x = "taxa", y = "Abundance", fill = "taxa")
#dev.off()
}
# Plotar o gráfico para a amostra atual
#png(filename = paste0(path, "data/images/plots/", sample_name, "_toptaxa.png"), width = 800, height = 600)
plot_bar(ps_toptaxa_sample, x = "taxa", y = "Abundance", fill = "taxa")
ps.toptaxa <- prune_taxa(toptaxa, ps.toptaxa)
ps.toptaxa <- transform_sample_counts(ps, function(OTU) OTU/sum(OTU))
ps.toptaxa <- prune_taxa(toptaxa, ps.toptaxa)
# Criar um gráfico separado para cada amostra
for (sample_name in row.names(otu_table(ps.toptaxa))) {
# Selecionar as top 5 taxonomias para a amostra atual
ps_sample <- prune_samples(sample_name, ps_toptaxa)
ps_toptaxa_sample <- prune_taxa(toptaxa, ps_sample)
# Plotar o gráfico para a amostra atual
#png(filename = paste0(path, "data/images/plots/", sample_name, "_toptaxa.png"), width = 800, height = 600)
plot_bar(ps_toptaxa_sample, x = "taxa", y = "Abundance", fill = "taxa")
#dev.off()
}
for (sample_name in row.names(otu_table(ps.toptaxa))){
print(sample_name)
}
for (sample_name in row.names(otu_table(ps.toptaxa))){
ps.toptaxa_sample <- prune_samples(sample_name, ps.toptaxa)
plot_bar(ps.toptaxa_sample, x="taxa", y="Abundance", fill="taxa")
}
source("~/projects/MitoSonar/MitoSonar_script.r")
source("~/projects/MitoSonar/MitoSonar_script.r")
for (sample_name in row.names(otu_table(ps.toptaxa))){
ps.toptaxa_sample <- prune_samples(sample_name, ps.toptaxa)
ps.toptaxa_sample
plot_bar(ps.toptaxa_sample, x="taxa", y="Abundance", fill="taxa")
}
for (sample_name in row.names(otu_table(ps.toptaxa))){
print(sample_name)
ps.toptaxa_sample <- prune_samples(sample_name, ps.toptaxa)
ps.toptaxa_sample
plot_bar(ps.toptaxa_sample, x="taxa", y="Abundance", fill="taxa")
}
for (sample_name in row.names(otu_table(ps.toptaxa))){
print(sample_name)
ps.toptaxa_sample <- prune_samples(sample_name, ps.toptaxa)
print(ps.toptaxa_sample)
plot_bar(ps.toptaxa_sample, x="taxa", y="Abundance", fill="taxa")
}
for (sample_name in row.names(otu_table(ps.toptaxa))){
print(sample_name)
ps.toptaxa_sample <- prune_samples(sample_name, ps.toptaxa)
print(ps.toptaxa_sample)
plot_bar(ps.toptaxa_sample, x="taxa", y="Abundance", fill="taxa")
}
system(paste("echo Done! Now plotting most abundant taxonomies by sample..."))
toptaxa <- names(sort(taxa_sums(ps), decreasing=TRUE))[1:5]
ps.toptaxa <- transform_sample_counts(ps, function(OTU) OTU/sum(OTU))
ps.toptaxa <- prune_taxa(toptaxa, ps.toptaxa)
for (sample_name in row.names(otu_table(ps.toptaxa))){
ps.toptaxa_sample <- prune_samples(sample_name, ps.toptaxa)
png(filename = paste0(path, "data/images/plots/", sample_name, "_toptaxa.png"), width = 800, height = 600)
plot_bar(ps.toptaxa_sample, x = "taxa", y = "Abundance", fill = "taxa")
dev.off()
}
?sleep
for (sample_name in row.names(otu_table(ps.toptaxa))){
ps.toptaxa_sample <- prune_samples(sample_name, ps.toptaxa)
png(filename = paste0(path, "data/images/plots/", sample_name, "_toptaxa.png"), width = 800, height = 600)
plot_bar(ps.toptaxa_sample, x = "taxa", y = "Abundance", fill = "taxa")
Sys.sleep(10)
dev.off()
}
for (sample_name in row.names(otu_table(ps.toptaxa))){
ps.toptaxa_sample <- prune_samples(sample_name, ps.toptaxa)
#png(filename = paste0(path, "data/images/plots/", sample_name, "_toptaxa.png"), width = 800, height = 600)
plot_bar(ps.toptaxa_sample, x = "taxa", y = "Abundance", fill = "taxa", title = paste0("Most abundant taxa for sample ",sample_name))
Sys.sleep(10)
#dev.off()
}
dev.off()
dev.off()
dev.off()
dev.off()
for (sample_name in row.names(otu_table(ps.toptaxa))){
ps.toptaxa_sample <- prune_samples(sample_name, ps.toptaxa)
#png(filename = paste0(path, "data/images/plots/", sample_name, "_toptaxa.png"), width = 800, height = 600)
plot_bar(ps.toptaxa_sample, x = "taxa", y = "Abundance", fill = "taxa", title = paste0("Most abundant taxa for sample ",sample_name))
Sys.sleep(10)
#dev.off()
}
plot_bar(ps.toptaxa_sample, x = "taxa", y = "Abundance", fill = "taxa", title = paste0("Most abundant taxa for sample ",sample_name))
plot_bar(ps.toptaxa_sample, x = "taxa", y = "Abundance", fill = "taxa", title = paste0("Most abundant taxa for sample ",sample_name))
png(filename = paste0(path, "data/images/plots/", sample_name, "_toptaxa.png"), width = 800, height = 600)
plot_bar(ps.toptaxa_sample, x = "taxa", y = "Abundance", fill = "taxa", title = paste0("Most abundant taxa for sample ",sample_name))
dev.off()
png(filename = paste0(path, "data/images/plots/", sample_name, "_toptaxa.png"), width = 800, height = 600)
plot_bar(ps.toptaxa_sample, x = "taxa", y = "Abundance", fill = "taxa", title = paste0("Most abundant taxa for sample ",sample_name))
dev.off()
dev.off()
dev.off()
